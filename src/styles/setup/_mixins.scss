/* Media queries Breakpoint mixins */

// Content Blocks:
// In addition to taking arguments, 
// a mixin can take an entire block of styles, known as a content block. 
// A mixin can declare that it takes a content block by including the @content at-rule in its body. 
// The content block is passed in using curly braces like any other block in Sass, 
// and itâ€™s injected in place of the @content rule.

@mixin for-mobileOnly-layout {
  @media (max-width: $break-mobileOnly) {
     @content;
  }
}

@mixin for-mobile-layout {
  @media (min-width: $break-mobile) {
     @content;
  }
}

@mixin for-tablet-layout {
   @media (min-width: $break-tablet) {
      @content;
   }
}

@mixin for-normal-layout {
   @media (min-width: $break-normal) {
      @content;
   }
}

@mixin for-wide-layout {
   @media (min-width: $break-wide) {
      @content;
   }
}

// $break-mobile: 500px; // ?What? why so big for narrow?
// $break-tablet: 700px;
// $break-normal: 900px; // ?What? why so big for narrow?
// $break-wide: 1300px;

@mixin layoutGTC($max) {
   grid-template-columns:
      minmax($layoutPadding, 1fr) // $layoutPadding: 20px; 
      minmax(auto, $max) // Parameter we put to max-width
      minmax($layoutPadding, 1fr); // $layoutPadding: 20px; 
}

/* Media  Mixins */

//aspect ratio mixin
@mixin aspect-ratio($width: 1, $height: 1) {
   position: relative;
   overflow: hidden;

   &:before { // ?What?
      content: "";
      display: block;
      width: 100%;
      padding-top: ($height / $width) * 100%;
   }

   >* { // means all elements under the specified element
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
   }

   >img { // means all irect children elements under the specified element
      height: 100%;
      object-fit: cover;
   }
}

// Mixin for removing hover efects on iphone screen
@mixin hover-supported {
   @media not all and (pointer: coarse) {
     &:hover {
       @content;
     }
   }
 }
 
 // Buttons
 
 @mixin btn($type: regular, $bg: $clr1, $clr: $clr3, $padding: em(24px) em(44px), $hover: darken($bg, 8%)) {
   display: inline-flex;
   align-items: center;
   text-decoration: none;
   text-transform: uppercase;
   padding: $padding;
   line-height: 1.25;
   font-size: em(14px);
   font-variation-settings: "wght" 430;
   border: none;
   cursor: pointer;
 
   transition: background-color 0.2s;
 
   @if $type == regular {
     background-color: $bg;
     color: $clr;
     &:hover {
       background-color: $hover;
     }
   } @else if $type == dark {
     background-color: $clr2;
     color: $clr3;
     &:hover {
       background-color: $clr1;
       color: $clr3;
     }
   } @else if $type == light {
     background-color: $clr3;
     color: $clr2;
     &:hover {
       background-color: $clr1;
       color: $clr3;
     }
   }
 }
 
 // Type
 
 @mixin type($type: bold) {
   // type options: 
   // 1.bold 
   // 2.boldCondensed 
   // 3.condensed
   // 4.light

   @if $type == bold {
     font-variation-settings: "wght" 430;
   } 
   @else if $type == boldCondensed {
     font-variation-settings: "wght" 430, "wdth" 80;
     letter-spacing: em(6.72px);
   } 
   @else if $type == condensed {
     font-variation-settings: "wdth" 80;
     letter-spacing: em(6.72px);
   }
   @else if $type == light {
     font-variation-settings: "wght" 200;
   }
 }

// font-variation-settings:
// The font-variation-settings CSS property provides low-level control over variable 
// font characteristics, by specifying the four letter axis names of the characteristics you want 
// to vary, along with their values.

@mixin flexCenter() {
   display: flex;
   justify-content: center;
   align-items: center;
   align-content: center;
}